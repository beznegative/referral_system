<?php
// –¢–µ—Å—Ç API –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫
header('Content-Type: text/html; charset=utf-8');

echo "<h1>–¢–µ—Å—Ç API —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã</h1>";

// –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
echo "<h2>1. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î</h2>";
try {
    require_once 'includes/database.php';
    echo "<p style='color: green;'>‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ</p>";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    $tables = ['users', 'referral_earnings', 'referral_settings', 'bookmakers', 'user_bookmakers'];
    foreach ($tables as $table) {
        $stmt = $pdo->query("SHOW TABLES LIKE '{$table}'");
        if ($stmt->rowCount() > 0) {
            echo "<p style='color: green;'>‚úì –¢–∞–±–ª–∏—Ü–∞ {$table} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</p>";
        } else {
            echo "<p style='color: red;'>‚úó –¢–∞–±–ª–∏—Ü–∞ {$table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p>";
        }
    }
} catch (Exception $e) {
    echo "<p style='color: red;'>‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: " . $e->getMessage() . "</p>";
}

// –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
echo "<h2>2. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤</h2>";
try {
    $stmt = $pdo->prepare("SELECT COUNT(*) as count FROM users WHERE is_affiliate = 1");
    $stmt->execute();
    $result = $stmt->fetch();
    echo "<p style='color: green;'>‚úì –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: " . $result['count'] . "</p>";
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
    $stmt = $pdo->prepare("SELECT id, full_name, telegram_username FROM users WHERE is_affiliate = 1 LIMIT 5");
    $stmt->execute();
    $affiliates = $stmt->fetchAll();
    
    if ($affiliates) {
        echo "<ul>";
        foreach ($affiliates as $affiliate) {
            echo "<li>ID: {$affiliate['id']}, –ò–º—è: {$affiliate['full_name']}, Telegram: {$affiliate['telegram_username']}</li>";
        }
        echo "</ul>";
    } else {
        echo "<p style='color: orange;'>‚ö† –ü–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç</p>";
    }
} catch (Exception $e) {
    echo "<p style='color: red;'>‚úó –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤: " . $e->getMessage() . "</p>";
}

// –¢–µ—Å—Ç 3: –¢–µ—Å—Ç API get_affiliates_api.php
echo "<h2>3. –¢–µ—Å—Ç API get_affiliates_api.php</h2>";
try {
    // –≠–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
    ob_start();
    $_SERVER['REQUEST_METHOD'] = 'GET';
    include 'get_affiliates_api.php';
    $output = ob_get_clean();
    
    $data = json_decode($output, true);
    if ($data && isset($data['success'])) {
        if ($data['success']) {
            echo "<p style='color: green;'>‚úì API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ</p>";
            echo "<p>–ü–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –≤ API: " . count($data['affiliates']) . "</p>";
        } else {
            echo "<p style='color: red;'>‚úó API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: " . ($data['error'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') . "</p>";
        }
    } else {
        echo "<p style='color: red;'>‚úó API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON</p>";
        echo "<pre>" . htmlspecialchars($output) . "</pre>";
    }
} catch (Exception $e) {
    echo "<p style='color: red;'>‚úó –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: " . $e->getMessage() . "</p>";
}

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Ñ–∞–π–ª—ã
echo "<h2>4. –¢–µ—Å—Ç –ø—Ä–∞–≤ –Ω–∞ —Ñ–∞–π–ª—ã</h2>";
$files = ['get_affiliates_api.php', 'register_api.php', 'check_user_api.php'];
foreach ($files as $file) {
    if (file_exists($file)) {
        if (is_readable($file)) {
            echo "<p style='color: green;'>‚úì –§–∞–π–ª {$file} –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è</p>";
        } else {
            echo "<p style='color: red;'>‚úó –§–∞–π–ª {$file} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è</p>";
        }
    } else {
        echo "<p style='color: red;'>‚úó –§–∞–π–ª {$file} –Ω–µ –Ω–∞–π–¥–µ–Ω</p>";
    }
}

// –¢–µ—Å—Ç 5: PHP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
echo "<h2>5. –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ PHP</h2>";
echo "<p>–í–µ—Ä—Å–∏—è PHP: " . phpversion() . "</p>";
echo "<p>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ JSON: " . (function_exists('json_encode') ? '‚úì' : '‚úó') . "</p>";
echo "<p>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ PDO: " . (class_exists('PDO') ? '‚úì' : '‚úó') . "</p>";
echo "<p>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ MySQL: " . (extension_loaded('pdo_mysql') ? '‚úì' : '‚úó') . "</p>";
echo "<p>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " . ini_get('max_execution_time') . " —Å–µ–∫.</p>";
echo "<p>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä POST: " . ini_get('post_max_size') . "</p>";

// –¢–µ—Å—Ç 6: –ö–æ–¥–∏—Ä–æ–≤–∫–∞
echo "<h2>6. –¢–µ—Å—Ç –∫–æ–¥–∏—Ä–æ–≤–∫–∏</h2>";
echo "<p>–ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞: " . mb_internal_encoding() . "</p>";
echo "<p>–¢–µ—Å—Ç —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤: –ü—Ä–∏–≤–µ—Ç –º–∏—Ä! üéâ</p>";

echo "<hr>";
echo "<p><strong>–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</strong> " . date('Y-m-d H:i:s') . "</p>";
?> 