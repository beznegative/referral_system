<?php
// –ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ø—á—É –ø–µ—Ä–µ–¥ –ª—é–±—ã–º –≤—ã–≤–æ–¥–æ–º
if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

require_once 'check_captcha.php';
requireCaptcha('test');
?>
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Mini App</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #1a1a1a;
            color: #ffffff;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            padding: 20px;
            margin: 0;
        }
        
        .container {
            max-width: 400px;
            margin: 0 auto;
        }
        
        .card {
            background-color: #2d2d2d;
            border: none;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        }
        
        .card h3 {
            color: #ffffff !important;
            font-weight: 700;
            margin-bottom: 20px;
        }
        
        .form-control {
            border-radius: 8px;
            border: 1px solid #555555;
            padding: 12px;
            margin-bottom: 15px;
            background-color: #3a3a3a;
            color: #ffffff;
        }
        
        .form-control:focus {
            background-color: #3a3a3a;
            border-color: #007bff;
            color: #ffffff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }
        
        .form-control::placeholder {
            color: #888888;
            opacity: 1;
        }
        
        .form-control::-webkit-input-placeholder {
            color: #888888;
        }
        
        .form-control::-moz-placeholder {
            color: #888888;
            opacity: 1;
        }
        
        .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
            color: #ffffff;
            border-radius: 8px;
            padding: 12px 24px;
            font-weight: 600;
            width: 100%;
        }
        
        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }
        
        .loading {
            text-align: center;
            padding: 40px;
        }
        
        .spinner-border {
            width: 3rem;
            height: 3rem;
            color: #007bff;
        }
        
        .alert {
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
        }
        
        .alert-success {
            background-color: rgba(40, 167, 69, 0.2);
            color: #75dd88;
            border: 1px solid rgba(40, 167, 69, 0.4);
        }
        
        .alert-info {
            background-color: rgba(23, 162, 184, 0.2);
            color: #17a2b8;
            border: 1px solid rgba(23, 162, 184, 0.4);
        }
        
        .welcome-message {
            text-align: center;
            padding: 30px;
        }
        
        .welcome-message h2 {
            color: #ffffff;
            margin-bottom: 20px;
        }
        
        .user-info {
            background-color: #3a3a3a;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        
        .hidden {
            display: none;
        }
        
        .error {
            color: #ff6b6b;
            text-align: center;
            padding: 20px;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        .form-label {
            font-weight: 600;
            margin-bottom: 5px;
            display: block;
            color: #ffffff;
        }
        
        .required {
            color: #dc3545;
        }
        
        .inviter-info {
            background-color: rgba(23, 162, 184, 0.2);
            padding: 10px;
            border-radius: 6px;
            margin-top: 5px;
            font-size: 0.9em;
            color: #ffffff;
        }
        
        .test-controls {
            background-color: #3a3a3a;
            border: 1px solid #555555;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        
        .test-controls h4 {
            margin-bottom: 15px;
            color: #ffc107;
        }
        
        .btn-warning {
            background-color: #ffc107;
            border-color: #ffc107;
            color: #000;
            margin-right: 10px;
            margin-bottom: 5px;
        }
        
        .btn-info {
            background-color: #17a2b8;
            border-color: #17a2b8;
            color: #fff;
            margin-right: 10px;
            margin-bottom: 5px;
        }
        
        select.form-control {
            background-color: #3a3a3a;
            color: #ffffff;
            border: 1px solid #555555;
        }
        
        select.form-control option {
            background-color: #3a3a3a;
            color: #ffffff;
        }
        
        .search-results {
            background-color: #3a3a3a;
            border: 1px solid #555555;
            border-radius: 8px;
            max-height: 200px;
            overflow-y: auto;
            margin-top: 5px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        }
        
        .search-result-item {
            padding: 10px 15px;
            cursor: pointer;
            border-bottom: 1px solid #555555;
        }
        
        .search-result-item:last-child {
            border-bottom: none;
        }
        
        .search-result-item:hover {
            background-color: #4a4a4a;
        }
        
        .search-result-item .name {
            font-weight: 600;
            color: #ffffff;
        }
        
        .search-result-item .username {
            color: #17a2b8;
            font-size: 0.9em;
        }
        
        .search-result-item .badge {
            font-size: 0.8em;
            padding: 2px 6px;
            border-radius: 4px;
            margin-left: 5px;
        }
        
        .search-result-item .badge.partner {
            background-color: #28a745;
            color: #ffffff;
        }
        
        .search-result-item .badge.user {
            background-color: #6c757d;
            color: #ffffff;
        }
        
        .selected-inviter {
            background-color: rgba(23, 162, 184, 0.2);
            padding: 10px;
            border-radius: 6px;
            margin-top: 5px;
            font-size: 0.9em;
            color: #ffffff;
            border: 1px solid rgba(23, 162, 184, 0.4);
        }
        
        .selected-inviter .remove-btn {
            float: right;
            background: none;
            border: none;
            color: #ff6b6b;
            cursor: pointer;
            font-size: 1.2em;
            padding: 0;
            margin-left: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="test-controls">
            <h4>üîß –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã</h4>
            <button class="btn btn-warning" onclick="testNewUser()">–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</button>
            <button class="btn btn-info" onclick="testExistingUser()">–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä</button>
            <button class="btn btn-warning" onclick="testExistingAffiliate()">–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</button>
        </div>
        
        <!-- –≠–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ -->
        <div id="loading" class="loading">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
            </div>
            <p class="mt-3">–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ...</p>
        </div>

        <!-- –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ -->
        <div id="error" class="error hidden">
            <h3>–û—à–∏–±–∫–∞</h3>
            <p id="error-message"></p>
        </div>

                 <!-- –≠–∫—Ä–∞–Ω –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π -->
         <div id="registered" class="hidden">
             <div class="welcome-message">
                 <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h2>
                 <div class="alert alert-info">
                     <strong>–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ</strong>
                 </div>
                 <div class="user-info">
                     <p><strong>–ò–º—è:</strong> <span id="user-name"></span></p>
                     <p><strong>Telegram:</strong> <span id="user-telegram"></span></p>
                     <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span id="user-status"></span></p>
                 </div>
                 
                 <!-- –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ -->
                 <div id="affiliate-actions" class="hidden">
                     <div class="alert alert-success">
                         <strong>üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞!</strong>
                     </div>
                     <button class="btn btn-primary" onclick="goToWorkPanel()">
                         –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–±–æ—Ç–µ
                     </button>
                 </div>
             </div>
         </div>

        <!-- –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ -->
        <div id="registration" class="hidden">
            <div class="card">
                <h3 class="text-center mb-4">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h3>
                
                <form id="registrationForm">
                    <div class="form-group">
                        <label class="form-label" for="full_name">–§–ò–û <span class="required">*</span></label>
                        <input type="text" class="form-control" id="full_name" name="full_name" required>
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="telegram_username">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram <span class="required">*</span></label>
                        <input type="text" class="form-control" id="telegram_username" name="telegram_username" 
                               placeholder="@username" required>
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="inviter_search">–ü—Ä–∏–≥–ª–∞—Å–∏–ª</label>
                        <input type="text" class="form-control" id="inviter_search" 
                               placeholder="–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ –∏–º—è..." autocomplete="off">
                        <div id="search-results" class="search-results hidden"></div>
                        <div id="selected-inviter" class="selected-inviter hidden"></div>
                        <input type="hidden" id="affiliate_id" name="affiliate_id">
                    </div>

                    <input type="hidden" id="telegram_id" name="telegram_id">

                    <button type="submit" class="btn btn-primary" id="submitBtn">
                        –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                    </button>
                </form>
            </div>
        </div>

        <!-- –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ -->
        <div id="success" class="hidden">
            <div class="welcome-message">
                <h2>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</h2>
                <div class="alert alert-success">
                    <strong>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ</strong>
                </div>
                <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</p>
            </div>
        </div>
    </div>

    <script>
        // –≠–º—É–ª—è—Ü–∏—è Telegram WebApp –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const mockTelegramUsers = {
            new: {
                id: 999999999,
                first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
                last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                username: 'testuser'
            },
            existing: {
                id: 430892673,
                first_name: '–°–µ—Ä–≥–µ–π',
                last_name: '–ü–∞—Ä—Ç–Ω–µ—Ä–æ–≤',
                username: 'sergey_partner'
            },
            affiliate: {
                id: 222222222,
                first_name: '–ê–Ω–¥—Ä–µ–π',
                last_name: '–ò–≤–∞–Ω–æ–≤',
                username: 'andrey_ivanov'
            }
        };
        
        // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∞
        let currentTestUser = mockTelegramUsers.new;
        
        // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        let telegramUser = null;
        
        // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        function testNewUser() {
            currentTestUser = mockTelegramUsers.new;
            resetAndStart();
        }
        
        function testExistingUser() {
            currentTestUser = mockTelegramUsers.existing;
            resetAndStart();
        }
        
        function testExistingAffiliate() {
            currentTestUser = mockTelegramUsers.affiliate;
            resetAndStart();
        }
        
        function resetAndStart() {
            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
            document.querySelectorAll('.container > div:not(.test-controls)').forEach(div => {
                div.classList.add('hidden');
            });
            
            // –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è
            clearSelection();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            document.getElementById('loading').classList.remove('hidden');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            setTimeout(initializeApp, 1000);
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
        });

        async function initializeApp() {
            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                telegramUser = currentTestUser;
                
                if (!telegramUser) {
                    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram');
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const userStatus = await checkUserStatus(telegramUser.id);
                
                // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                document.getElementById('loading').classList.add('hidden');
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–∫—Ä–∞–Ω
                if (userStatus.exists) {
                    showRegisteredUser(userStatus.user);
                } else {
                    showRegistrationForm();
                }
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
                showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–µ: ' + error.message);
            }
        }

        async function checkUserStatus(telegramId) {
            const response = await fetch('check_user_api.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ telegram_id: telegramId })
            });
            
            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            }
            
            return await response.json();
        }

        let searchTimeout;
        let selectedUser = null;

        async function searchUsers(query) {
            try {
                if (!query || query.trim().length < 2) {
                    hideSearchResults();
                    return;
                }
                
                const response = await fetch(`search_users_api.php?search=${encodeURIComponent(query)}`);
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                
                if (!data.success) {
                    throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
                }
                
                showSearchResults(data.users || []);
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
                hideSearchResults();
            }
        }

        function showSearchResults(users) {
            const resultsDiv = document.getElementById('search-results');
            
            if (users.length === 0) {
                resultsDiv.innerHTML = '<div class="search-result-item">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
                resultsDiv.classList.remove('hidden');
                return;
            }
            
            let html = '';
            users.forEach(user => {
                const badge = user.is_affiliate ? 
                    '<span class="badge partner">–ü–∞—Ä—Ç–Ω–µ—Ä</span>' : 
                    '<span class="badge user">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</span>';
                
                const displayUsername = user.telegram_username.startsWith('@') ? user.telegram_username : `@${user.telegram_username}`;
                html += `
                    <div class="search-result-item" onclick="selectUser(${user.id}, '${user.full_name}', '${user.telegram_username}', ${user.is_affiliate}, ${user.referral_count})">
                        <div class="name">${user.full_name} ${badge}</div>
                        <div class="username">${displayUsername}</div>
                        ${user.referral_count > 0 ? `<div style="font-size: 0.8em; color: #888;">–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.referral_count}</div>` : ''}
                    </div>
                `;
            });
            
            resultsDiv.innerHTML = html;
            resultsDiv.classList.remove('hidden');
        }

        function hideSearchResults() {
            document.getElementById('search-results').classList.add('hidden');
        }

        function selectUser(id, name, username, isAffiliate, referralCount) {
            selectedUser = { id, name, username, isAffiliate, referralCount };
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ username —Å @
            const displayUsername = username.startsWith('@') ? username : `@${username}`;
            document.getElementById('inviter_search').value = displayUsername;
            document.getElementById('affiliate_id').value = id;
            
            const selectedDiv = document.getElementById('selected-inviter');
            
            const displayUsernameForInfo = username.startsWith('@') ? username : `@${username}`;
            selectedDiv.innerHTML = `
                <strong>${name}</strong><br>
                Telegram: ${displayUsernameForInfo}
                <button type="button" class="remove-btn" onclick="clearSelection()">&times;</button>
            `;
            selectedDiv.classList.remove('hidden');
            
            hideSearchResults();
        }

        function clearSelection() {
            selectedUser = null;
            document.getElementById('inviter_search').value = '';
            document.getElementById('affiliate_id').value = '';
            document.getElementById('selected-inviter').classList.add('hidden');
        }

                 function showRegisteredUser(user) {
             document.getElementById('user-name').textContent = user.full_name;
             document.getElementById('user-telegram').textContent = user.telegram_username;
             document.getElementById('user-status').textContent = user.is_affiliate ? '–ü–∞—Ä—Ç–Ω–µ—Ä' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
             
             // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
             if (user.is_affiliate) {
                 document.getElementById('affiliate-actions').classList.remove('hidden');
             }
             
             document.getElementById('registered').classList.remove('hidden');
         }

         function goToWorkPanel() {
             // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
             window.location.href = 'index.php';
         }

        function showRegistrationForm() {
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram
            document.getElementById('telegram_id').value = telegramUser.id;
            document.getElementById('telegram_username').value = '@' + (telegramUser.username || '');
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –∏–∑ Telegram, –∑–∞–ø–æ–ª–Ω—è–µ–º –§–ò–û
            if (telegramUser.first_name || telegramUser.last_name) {
                const fullName = [telegramUser.first_name, telegramUser.last_name].filter(Boolean).join(' ');
                document.getElementById('full_name').value = fullName;
            }
            
            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ selected-inviter —Å–∫—Ä—ã—Ç –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            document.getElementById('selected-inviter').classList.add('hidden');
            document.getElementById('search-results').classList.add('hidden');
            
            document.getElementById('registration').classList.remove('hidden');
        }

        function showError(message) {
            document.getElementById('loading').classList.add('hidden');
            document.getElementById('error-message').textContent = message;
            document.getElementById('error').classList.remove('hidden');
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        document.getElementById('registrationForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const submitBtn = document.getElementById('submitBtn');
            submitBtn.disabled = true;
            submitBtn.textContent = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...';
            
            try {
                const formData = new FormData(this);
                const response = await fetch('register_api.php', {
                    method: 'POST',
                    body: formData
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                let result;
                try {
                    result = await response.json();
                } catch (jsonError) {
                    throw new Error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞');
                }
                
                if (result.success) {
                    document.getElementById('registration').classList.add('hidden');
                    document.getElementById('success').classList.remove('hidden');
                } else {
                    throw new Error(result.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
                }
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
                alert('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + error.message);
                
                submitBtn.disabled = false;
                submitBtn.textContent = '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è';
            }
        });



        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è
        document.getElementById('inviter_search').addEventListener('input', function() {
            const query = this.value;
            
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                searchUsers(query);
            }, 300);
        });

        // –°–∫—Ä—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –ø–æ–ª—è
        document.addEventListener('click', function(e) {
            if (!e.target.closest('#inviter_search') && !e.target.closest('#search-results')) {
                hideSearchResults();
            }
        });
    </script>
</body>
</html> 